// Generated by CoffeeScript 1.4.0
var diamond;

diamond = require('./diamond');

exports.create = function() {
  var buf, cobTree_, col_, defaultCobs_, k, line_, lines_, map_, mode_, moveMap_, normalizeCursor_, setCursor_, v;
  mode_ = 'n';
  lines_ = [[]];
  line_ = 0;
  col_ = 0;
  cobTree_ = {};
  map_ = function(mode, c, cob) {
    var _base, _base1, _ref, _ref1, _ref2;
    if ((_ref = cobTree_[mode]) == null) {
      cobTree_[mode] = {};
    }
    if ((_ref1 = (_base = cobTree_[mode])[c]) == null) {
      _base[c] = {};
    }
    if ((_ref2 = (_base1 = cobTree_[mode][c]).cobs) == null) {
      _base1.cobs = [];
    }
    return cobTree_[mode][c].cobs.push(cob);
  };
  defaultCobs_ = {
    i: function(c) {
      var newline, _ref;
      newline = c === diamond.CR;
      line_ = newline ? line_ + 1 : line_;
      col_ = newline ? 0 : col_ + 1;
      if ((_ref = lines_[line_]) == null) {
        lines_[line_] = [];
      }
      if (!newline) {
        return lines_[line_].splice(col_ - 1, 0, c);
      }
    }
  };
  for (k in defaultCobs_) {
    v = defaultCobs_[k];
    defaultCobs_[k] = [v];
  }
  normalizeCursor_ = function(r, c) {
    var cmax, cmin, col, line, lmax, lmin, _ref;
    lmin = 0;
    lmax = lines_.length - 1;
    line = Math.min(lmax, Math.max(lmin, r));
    cmin = 0;
    cmax = ((_ref = lines_[line]) != null ? _ref : []).join('').length;
    if (cmax !== 0) {
      cmax--;
    }
    if (mode_ === 'i' && cmax !== 0) {
      cmax++;
    }
    col = Math.min(cmax, Math.max(cmin, c));
    return [line, col];
  };
  setCursor_ = function(r, c) {
    var _ref;
    return _ref = normalizeCursor_(r, c), line_ = _ref[0], col_ = _ref[1], _ref;
  };
  moveMap_ = {};
  moveMap_['h'] = function() {
    return normalizeCursor_(line_, col_ - 1);
  };
  moveMap_['l'] = function() {
    return normalizeCursor_(line_, col_ + 1);
  };
  for (k in moveMap_) {
    v = moveMap_[k];
    map_('n', k, (function(k, v) {
      return function() {
        var c, r, _ref;
        _ref = v(), r = _ref[0], c = _ref[1];
        return setCursor_(r, c);
      };
    })(k, v));
  }
  buf = {
    nmap: function(c, cob) {
      return map_('n', c, cob);
    },
    imap: function(c, cob) {
      return map_('i', c, cob);
    },
    contents: function() {
      var line;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = lines_.length; _i < _len; _i++) {
          line = lines_[_i];
          _results.push(line.join(''));
        }
        return _results;
      })()).join('\n');
    },
    mode: function() {
      return mode_;
    },
    cursor: function() {
      return [line_, col_];
    },
    type: function(chars) {
      var c, f, _i, _len, _ref, _results;
      _ref = diamond.tokenize(chars);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        _results.push((function() {
          var _j, _len1, _ref1, _ref2, _ref3, _ref4, _ref5, _results1;
          _ref5 = (_ref1 = (_ref2 = (_ref3 = cobTree_[mode_]) != null ? (_ref4 = _ref3[c]) != null ? _ref4.cobs : void 0 : void 0) != null ? _ref2 : defaultCobs_[mode_]) != null ? _ref1 : [];
          _results1 = [];
          for (_j = 0, _len1 = _ref5.length; _j < _len1; _j++) {
            f = _ref5[_j];
            _results1.push(f(c));
          }
          return _results1;
        })());
      }
      return _results;
    }
  };
  buf.nmap('i', function() {
    return mode_ = 'i';
  });
  buf.nmap('a', function() {
    mode_ = 'i';
    return setCursor_(line_, col_ + 1);
  });
  buf.nmap('x', function() {
    lines_[line_].splice(col_, 1);
    return setCursor_(line_, col_);
  });
  buf.imap(diamond.ESC, function() {
    mode_ = 'n';
    return setCursor_(line_, col_ - 1);
  });
  return buf;
};
